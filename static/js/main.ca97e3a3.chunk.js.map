{"version":3,"sources":["components/Forms/UpdatePostForm/UpdatePostForm.module.css","components/Forms/AddPostForm/AddPostForm.module.css","components/Forms/AddCommentsForm/AddCommentsForm.module.css","components/NavBar/NavBar.module.css","components/SinglePost/SinglePost.module.css","components/Comments/Comments.module.css","components/SinglePagePost/SinglePagePost.module.css","components/Modal/Modal.module.css","components/CloseButton/CloseButton.module.css","components/Hero/Hero.module.css","components/Posts/Posts.module.css","components/Container/Container.module.css","components/Button/Button.module.css","helpers/axios.ts","helpers/constants.ts","redux/posts/posts-operations.ts","redux/posts/posts-selectors.ts","redux/posts/posts-action.ts","redux/posts/postSlice.ts","redux/store.ts","components/Container/Container.tsx","redux/hooks.ts","components/Forms/AddCommentsForm/AddCommentsForm.tsx","components/Button/Button.tsx","components/CloseButton/CloseButton.tsx","components/Modal/Modal.tsx","components/Forms/UpdatePostForm/UpdatePostForm.tsx","components/Comments/Comments.tsx","components/SinglePagePost/SinglePagePost.tsx","components/Forms/AddPostForm/AddPostForm.tsx","images/climbing.jpg","components/Hero/Hero.tsx","components/NavBar/NavBar.tsx","components/SinglePost/SinglePost.tsx","components/Posts/Posts.tsx","components/app/App.tsx","styles/theme.ts","index.tsx"],"names":["module","exports","req","axios","create","baseURL","getAllPosts","get","then","res","data","catch","e","Error","message","getPostById","id","a","post","addPost","updatePost","put","removePost","delete","addComment","newComment","RgetAllPosts","RgetPostById","RupdatePostById","RaddPost","RdeletePost","RaddComment","fetchPosts","createAsyncThunk","c","posts","fetchPostById","fetchAddPost","newPostObj","newPost","fetchUpdatePost","updatedPostObj","fetchDeletePost","fetchAddComment","getPosts","createAction","state","postsOperations","postSlice","createSlice","name","initialState","comments","isLoading","isFetching","error","reducers","extraReducers","builder","addCase","pending","fulfilled","payload","rejected","push","newPostsArray","map","filter","unshift","store","configureStore","Container","children","className","s","body","useAppDispatch","useDispatch","useAppSelector","useSelector","AddCommentsForm","postId","onClose","useState","comment","setComment","dispatch","commentId","wrapper","onSubmit","preventDefault","handleSubmit","form","htmlFor","label","text","type","value","onChange","target","input","autoComplete","button","Button","onClick","CloseButton","aria-label","btn","icon","color","modalRoot","document","querySelector","Modal","createPortal","role","tabIndex","backdrop","currentTarget","onKeyDown","console","log","UpdatePostForm","postObj","title","setTitle","setBody","titleId","bodyId","updatedPost","handlesubmit","textarea","style","resize","buttonClose","Comments","postid","getCommentPostById","useEffect","length","list","item","display","SinglePost","isAddCommentFormShown","setIsAddCommentFormShown","isCommentsShown","setIsCommentsShown","isModalShown","setIsModalShown","params","useParams","history","useHistory","find","S","buttonGroup","AddPostForm","isErrorShown","setIsErrorShown","bodiId","useForm","defaultValues","register","setTimeout","nanoid","addNewPost","Hero","hero","img","src","Img","alt","NavBar","isMainPage","useLocation","pathname","header","nav","to","link","activeClassName","active","exact","props","handleDelete","Posts","toString","App","location","path","styled","ReactDOM","render","StrictMode","PostStore","theme","mainTheme","getElementById"],"mappings":"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","file":"static/js/main.ca97e3a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"UpdatePostForm_form__3h0Nh\",\"text\":\"UpdatePostForm_text__3O-IG\",\"input\":\"UpdatePostForm_input__2WjHG\",\"textarea\":\"UpdatePostForm_textarea__1-D8z\",\"button\":\"UpdatePostForm_button__2RK-j\",\"label\":\"UpdatePostForm_label__xpgPM\",\"wrapper\":\"UpdatePostForm_wrapper__2UOBw\",\"buttonClose\":\"UpdatePostForm_buttonClose__37BtN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddPostForm_form__3IfAX\",\"label\":\"AddPostForm_label__1vCym\",\"text\":\"AddPostForm_text__2o07m\",\"input\":\"AddPostForm_input__32xM6\",\"textarea\":\"AddPostForm_textarea__5S7kA\",\"button\":\"AddPostForm_button__2lBCq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddCommentsForm_form__3GqOw\",\"text\":\"AddCommentsForm_text__22qJS\",\"input\":\"AddCommentsForm_input__2IqZy\",\"button\":\"AddCommentsForm_button__1uUOV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"NavBar_header__1jZCd\",\"link\":\"NavBar_link__1j-_p\",\"active\":\"NavBar_active__RXoMI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonGroup\":\"SinglePost_buttonGroup__32hYW\",\"text\":\"SinglePost_text__2e7kT\",\"title\":\"SinglePost_title__EIsPs\",\"link\":\"SinglePost_link__2mjy6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Comments_list__1DNdh\",\"text\":\"Comments_text__1ZcD5\",\"item\":\"Comments_item__3oZr1\",\"title\":\"Comments_title__3V76k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SinglePagePost_wrapper__1Fo-c\",\"buttonGroup\":\"SinglePagePost_buttonGroup__2mlqm\",\"text\":\"SinglePagePost_text__3ew5D\",\"title\":\"SinglePagePost_title__3dK90\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Modal_wrapper__3iECU\",\"backdrop\":\"Modal_backdrop__BQqZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"CloseButton_btn__ae31u\",\"icon\":\"CloseButton_icon__1y0A8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hero\":\"Hero_hero__3jIec\",\"img\":\"Hero_img__3wx7T\",\"error\":\"Hero_error__1hxxj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Posts_list__zqs28\",\"item\":\"Posts_item__3MTJE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Container_body__1oX8I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2c1R0\"};","import axios from 'axios';\r\nimport {\r\n  Ipost,\r\n  InewPost,\r\n  IpostWithComments,\r\n  IaddComment,\r\n  Icomment,\r\n  Tid,\r\n} from './interfaces';\r\n\r\n//  there few different methods\r\n//  with async/await\r\n//  with Promise.than.catch\r\n\r\nexport const req = axios.create({\r\n  baseURL: 'https://bloggy-api.herokuapp.com',\r\n});\r\n\r\n//  Promise.then.catch\r\n// =====================================\r\nexport const getAllPosts = (): Promise<Ipost[]> =>\r\n  req\r\n    .get('/posts')\r\n    .then(res => res.data)\r\n    .catch(e => {\r\n      throw new Error(e.message);\r\n    });\r\n\r\nexport const getPostById = async (id: Tid): Promise<IpostWithComments> => {\r\n  const post = await req.get(`/posts/${id}?_embed=comments`);\r\n  return post.data;\r\n};\r\n\r\nexport const addPost = (post: InewPost): Promise<Ipost> =>\r\n  req\r\n    .post('/posts', post)\r\n    .then(res => res.data)\r\n    .catch(e => {\r\n      throw new Error(e.message);\r\n    });\r\n\r\n// async/ await with  try catch\r\n// =====================================================\r\nexport const updatePost = async (post: Ipost): Promise<Ipost> => {\r\n  try {\r\n    const res = await req.put(`/posts/${post.id}`);\r\n    return res.data;\r\n  } catch (e) {\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\nexport const removePost = async (id: Tid): Promise<void> => {\r\n  try {\r\n    await req.delete(`/posts/${id}`);\r\n  } catch (e) {\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\nexport const addComment = async (\r\n  newComment: IaddComment,\r\n): Promise<Icomment> => {\r\n  try {\r\n    const res = await req.post(`/comments`, newComment);\r\n    return res.data;\r\n  } catch (e) {\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n","// Redux constants\r\n// ================================================\r\n\r\nexport const RgetAllPosts = 'posts/getAll';\r\nexport const RgetPostById = 'posts/getPostById';\r\nexport const RupdatePostById = 'posts/updatePostById';\r\nexport const RaddPost = 'posts/addPost';\r\nexport const RdeletePost = 'posts/deletePost';\r\nexport const RaddComment = 'posts/addComment';\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { axios as req, constants as c } from 'helpers';\r\nimport { IaddComment, Ipost, Tid } from 'helpers/interfaces';\r\n\r\nexport const fetchPosts = createAsyncThunk(c.RgetAllPosts, async () => {\r\n  try {\r\n    const posts = await req.getAllPosts();\r\n    return posts;\r\n  } catch (error) {\r\n    throw error.message;\r\n  }\r\n});\r\n\r\nexport const fetchPostById = createAsyncThunk(\r\n  c.RgetPostById,\r\n  async (id: Tid) => {\r\n    try {\r\n      const post = await req.getPostById(id);\r\n      return post;\r\n    } catch (error) {\r\n      throw error.message;\r\n    }\r\n  },\r\n);\r\n\r\nexport const fetchAddPost = createAsyncThunk(\r\n  c.RaddPost,\r\n  async (newPostObj: Ipost) => {\r\n    try {\r\n      const newPost = await req.addPost(newPostObj);\r\n      return newPost;\r\n    } catch (error) {\r\n      throw error.message;\r\n    }\r\n  },\r\n);\r\n\r\nexport const fetchUpdatePost = createAsyncThunk(\r\n  c.RupdatePostById,\r\n  async (updatedPostObj: Ipost) => {\r\n    try {\r\n      await req.updatePost(updatedPostObj);\r\n      return updatedPostObj;\r\n    } catch (error) {\r\n      throw error.message;\r\n    }\r\n  },\r\n);\r\n\r\nexport const fetchDeletePost = createAsyncThunk(\r\n  c.RdeletePost,\r\n  async (id: Tid) => {\r\n    try {\r\n      await req.removePost(id);\r\n      return id;\r\n    } catch (error) {\r\n      throw error.message;\r\n    }\r\n  },\r\n);\r\n\r\nexport const fetchAddComment = createAsyncThunk(\r\n  c.RaddComment,\r\n  async (id: IaddComment) => {\r\n    try {\r\n      const newComment = await req.addComment(id);\r\n      return newComment;\r\n    } catch (error) {\r\n      throw error.message;\r\n    }\r\n  },\r\n);\r\n","import {\r\n  IaddComment,\r\n  Icomment,\r\n  Ipost,\r\n  Istate,\r\n  Tid,\r\n} from '../../helpers/interfaces';\r\n\r\nexport const getPosts = (state: Istate): Ipost[] => state.posts;\r\nexport const getComments = (state: Istate): IaddComment[] => state.comments;\r\nexport const getPostById = (state: Istate, postId: Tid): Ipost | undefined => {\r\n  const post = state.posts.find(e => {\r\n    return e.id === postId;\r\n  });\r\n  return post;\r\n};\r\n\r\nexport const getCommentPostById = (\r\n  postid: Tid,\r\n  state: Istate,\r\n): Icomment[] | undefined => {\r\n  const comments = state.comments.filter(e => e.postId === postid);\r\n  if (comments) {\r\n    return comments;\r\n  }\r\n  return undefined;\r\n};\r\n","import { createAction } from '@reduxjs/toolkit';\r\nimport { constants as c } from 'helpers';\r\nimport { InewPost, Ipost } from '../../helpers/interfaces';\r\n\r\nexport const addPost = createAction<InewPost>(c.RaddPost);\r\nexport const deletePost = createAction<string>(c.RdeletePost);\r\nexport const updatePostById = createAction<Ipost>(c.RupdatePostById);\r\nexport const getPostById = createAction<Ipost>(c.RupdatePostById);\r\n","/* eslint-disable no-param-reassign */\r\n// We can disable this rule becouse Redux using Immer\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nimport { Istate } from 'helpers/interfaces';\r\nimport { postsOperations } from 'redux/posts';\r\nimport { fetchAddComment, fetchPostById } from './posts-operations';\r\n\r\nconst {\r\n  fetchPosts,\r\n  fetchAddPost,\r\n  fetchUpdatePost,\r\n  fetchDeletePost,\r\n} = postsOperations;\r\n\r\nconst initialState: Istate = {\r\n  posts: [],\r\n  comments: [],\r\n  isLoading: false,\r\n  isFetching: false,\r\n  error: null,\r\n};\r\n\r\nconst postSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    // [postsActions.getPostById.toString()]: (state: Istate, { payload: id }) => {\r\n    //   const postToFind = state.posts.filter(e => e.id === id);\r\n    //   return\r\n    // },\r\n  },\r\n  extraReducers: builder => {\r\n    builder\r\n      // Get Posts\r\n      // ======================================\r\n      .addCase(fetchPosts.pending, (state: Istate) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(fetchPosts.fulfilled, (state: Istate, { payload }) => {\r\n        state.isLoading = false;\r\n        state.posts = payload;\r\n      })\r\n      .addCase(fetchPosts.rejected, (state: Istate) => {\r\n        state.isLoading = false;\r\n        state.isLoading = true;\r\n      })\r\n      // Add Post\r\n      // ==========================================\r\n      .addCase(fetchAddPost.pending, (state: Istate) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(fetchAddPost.fulfilled, (state: Istate, { payload }) => {\r\n        state.posts.push(payload);\r\n      })\r\n      .addCase(fetchAddPost.rejected, (state: Istate) => {\r\n        state.isLoading = false;\r\n      })\r\n      // Update Post\r\n      // ==========================================\r\n      .addCase(fetchUpdatePost.pending, (state: Istate) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(fetchUpdatePost.fulfilled, (state: Istate, { payload }) => {\r\n        const newPostsArray = state.posts.map(e => {\r\n          if (e.id === payload.id) {\r\n            return payload;\r\n          }\r\n          return e;\r\n        });\r\n        state.posts = newPostsArray;\r\n      })\r\n      .addCase(fetchUpdatePost.rejected, (state: Istate) => {\r\n        state.isLoading = false;\r\n      })\r\n      // Delete Post\r\n      // ==========================================\r\n      .addCase(fetchDeletePost.pending, (state: Istate) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(fetchDeletePost.fulfilled, (state: Istate, { payload: id }) => {\r\n        const newPostsArray = state.posts.filter(e => e.id !== id);\r\n        state.posts = newPostsArray;\r\n      })\r\n      .addCase(fetchDeletePost.rejected, (state: Istate) => {\r\n        state.isLoading = false;\r\n      })\r\n      // add Comments\r\n      // ===============================================\r\n      .addCase(fetchAddComment.pending, (state: Istate) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(fetchAddComment.fulfilled, (state: Istate, { payload }) => {\r\n        state.comments.unshift(payload);\r\n      })\r\n      .addCase(fetchAddComment.rejected, (state: Istate) => {\r\n        state.isLoading = false;\r\n      })\r\n      // get Comments by Id\r\n      // ===========================================\r\n      .addCase(fetchPostById.pending, (state: Istate) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(fetchPostById.fulfilled, (state: Istate, { payload }) => {\r\n        state.comments = payload.comments;\r\n      })\r\n      .addCase(fetchPostById.rejected, (state: Istate) => {\r\n        state.isLoading = false;\r\n      });\r\n  },\r\n});\r\n\r\nexport default postSlice;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport postSlice from './posts/postSlice';\n\nexport const store = configureStore(postSlice);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n\nexport default store;\n","import React, { ReactChildren, ReactChild } from 'react';\r\nimport s from './Container.module.css';\r\n\r\ninterface AuxProps {\r\n  children: ReactChild | ReactChild[] | ReactChildren | ReactChildren[];\r\n}\r\n\r\nexport default function Container({ children }: AuxProps): JSX.Element {\r\n  return <div className={s.body}>{children}</div>;\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Tid } from 'helpers/interfaces';\r\nimport { FormEvent, useState } from 'react';\r\nimport { useAppDispatch } from '../../../redux/hooks';\r\nimport { fetchAddComment } from '../../../redux/posts/posts-operations';\r\nimport s from './AddCommentsForm.module.css';\r\n\r\ninterface Iprops {\r\n  postId: Tid;\r\n  onClose: () => void;\r\n}\r\nexport default function AddCommentsForm({\r\n  postId,\r\n  onClose,\r\n}: Iprops): JSX.Element {\r\n  const [comment, setComment] = useState('');\r\n  const dispatch = useAppDispatch();\r\n  const commentId = 'comment';\r\n\r\n  function handleSubmit(e: FormEvent) {\r\n    e.preventDefault();\r\n\r\n    const newComment = {\r\n      postId,\r\n      body: comment,\r\n    };\r\n\r\n    dispatch(fetchAddComment(newComment));\r\n    setComment('');\r\n    onClose();\r\n  }\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <form onSubmit={e => handleSubmit(e)} className={s.form}>\r\n        <label htmlFor={commentId} className={s.label}>\r\n          <span className={s.text}>Tap Comments there</span>\r\n          <input\r\n            type=\"text\"\r\n            value={comment}\r\n            onChange={e => setComment(e.target.value)}\r\n            id={commentId}\r\n            className={s.input}\r\n            autoComplete=\"off\"\r\n          />\r\n        </label>\r\n        <button className={s.button} type=\"submit\">\r\n          Add Comment\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import s from './Button.module.css';\r\n\r\ninterface Props {\r\n  onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport default function Button({ children, onClick }: Props): JSX.Element {\r\n  return (\r\n    <button type=\"button\" onClick={onClick} className={s.button}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\n// export default Button\r\n","import { AiFillCloseCircle } from 'react-icons/ai';\r\nimport s from './CloseButton.module.css';\r\n\r\ninterface IProps {\r\n  onClose: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n}\r\n\r\nexport default function CloseButton({ onClose }: IProps): JSX.Element {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      aria-label=\"close-button\"\r\n      onClick={onClose}\r\n      className={s.btn}\r\n    >\r\n      <AiFillCloseCircle className={s.icon} color=\"#e69346\" />\r\n    </button>\r\n  );\r\n}\r\n","import { createPortal } from 'react-dom';\r\nimport React from 'react';\r\nimport s from './Modal.module.css';\r\nimport CloseButton from '../CloseButton/CloseButton';\r\n\r\nconst modalRoot = document.querySelector('#modalRoot') as HTMLElement;\r\n\r\ntype Props = {\r\n  onClose: (event?: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n  children: React.ReactNode;\r\n};\r\n\r\nexport default function Modal({ onClose, children }: Props): React.ReactPortal {\r\n  function onBackdropClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\r\n    if (e.target === e.currentTarget) {\r\n      onClose();\r\n    }\r\n  }\r\n\r\n  return createPortal(\r\n    <div\r\n      role=\"textbox\"\r\n      tabIndex={0}\r\n      className={s.backdrop}\r\n      onClick={onBackdropClick}\r\n      onKeyDown={() => {\r\n        // eslint-disable-next-line no-console\r\n        console.log();\r\n      }}\r\n    >\r\n      <div className={s.wrapper}>\r\n        <CloseButton onClose={() => onClose()} />\r\n        {children}\r\n      </div>\r\n    </div>,\r\n    modalRoot,\r\n  );\r\n}\r\n","import { Ipost } from 'helpers/interfaces';\r\nimport { useState } from 'react';\r\nimport { useAppDispatch } from 'redux/hooks';\r\nimport { fetchUpdatePost } from 'redux/posts/posts-operations';\r\nimport s from './UpdatePostForm.module.css';\r\n\r\ninterface Iprops {\r\n  postObj: Ipost;\r\n  onClose: () => void;\r\n}\r\n\r\nexport default function UpdatePostForm({\r\n  postObj,\r\n  onClose,\r\n}: Iprops): JSX.Element {\r\n  const [title, setTitle] = useState(postObj.title);\r\n  const [body, setBody] = useState(postObj.body);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const titleId = 'title1';\r\n  const bodyId = 'body1';\r\n\r\n  function handlesubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n\r\n    const updatedPost = {\r\n      title,\r\n      body,\r\n      id: postObj.id,\r\n    };\r\n    dispatch(fetchUpdatePost(updatedPost));\r\n    onClose();\r\n  }\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={e => handlesubmit(e)}>\r\n      <label htmlFor={titleId} className={s.label}>\r\n        <span className={s.text}>Title</span>\r\n        <input\r\n          type=\"text\"\r\n          value={title}\r\n          onChange={e => {\r\n            setTitle(e.target.value);\r\n          }}\r\n          className={s.input}\r\n          id={titleId}\r\n        />\r\n      </label>\r\n\r\n      <label htmlFor={bodyId} className={s.label}>\r\n        <span className={s.text}>Text</span>\r\n        <textarea\r\n          className={s.textarea}\r\n          value={body}\r\n          id={bodyId}\r\n          style={{ resize: 'none' }}\r\n          onChange={e => {\r\n            setBody(e.target.value);\r\n          }}\r\n        />\r\n      </label>\r\n      <div className={s.wrapper}>\r\n        <button className={s.button} type=\"submit\">\r\n          Save changes\r\n        </button>\r\n        <button\r\n          className={s.buttonClose}\r\n          type=\"button\"\r\n          onClick={() => onClose()}\r\n        >\r\n          Close\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n","import { useEffect } from 'react';\r\nimport { Tid } from 'helpers/interfaces';\r\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\r\nimport { getCommentPostById } from '../../redux/posts/posts-selectors';\r\nimport { fetchPostById } from '../../redux/posts/posts-operations';\r\nimport s from './Comments.module.css';\r\n\r\ninterface Iprops {\r\n  postId: Tid;\r\n}\r\n\r\nexport default function Comments({ postId }: Iprops): JSX.Element {\r\n  const comments = useAppSelector(state => getCommentPostById(postId, state));\r\n  const dispatch = useAppDispatch();\r\n  useEffect(() => {\r\n    dispatch(fetchPostById(postId));\r\n  }, [dispatch, postId]);\r\n\r\n  return comments ? (\r\n    <>\r\n      <h3 className={s.title}>\r\n        {comments.length > 0 ? 'Comments' : 'No Comments'}\r\n      </h3>\r\n      <ul className={s.list}>\r\n        {comments.map(e => {\r\n          return (\r\n            <li className={s.item} key={e.id}>\r\n              <p className={s.text}>{e.body}</p>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </>\r\n  ) : (\r\n    <div style={{ display: 'none' }}>1</div>\r\n  );\r\n}\r\n","import { useState, useEffect } from 'react';\r\n// import { Ipost, Tid } from 'helpers/interfaces';\r\nimport AddCommentsForm from 'components/Forms/AddCommentsForm/AddCommentsForm';\r\nimport Button from 'components/Button/Button';\r\nimport * as S from 'redux/posts/posts-selectors';\r\nimport { useAppDispatch, useAppSelector } from 'redux/hooks';\r\nimport { Tid } from 'helpers/interfaces';\r\nimport { fetchDeletePost, fetchPostById } from 'redux/posts/posts-operations';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport Modal from '../Modal/Modal';\r\nimport UpdatePostForm from '../Forms/UpdatePostForm/UpdatePostForm';\r\nimport Comments from '../Comments/Comments';\r\nimport s from './SinglePagePost.module.css';\r\n\r\ninterface Iparams {\r\n  postId?: Tid;\r\n}\r\n\r\nexport default function SinglePost(): JSX.Element {\r\n  const [isAddCommentFormShown, setIsAddCommentFormShown] = useState(false);\r\n  const [isCommentsShown, setIsCommentsShown] = useState(false);\r\n  const [isModalShown, setIsModalShown] = useState(false);\r\n  const params: Iparams = useParams();\r\n  const history = useHistory();\r\n\r\n  let id: Tid = '';\r\n  if (params.postId) {\r\n    id = params.postId;\r\n  }\r\n\r\n  const post = useAppSelector(state => S.getPostById(state, id));\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!post) {\r\n      dispatch(fetchPostById(id));\r\n    }\r\n  }, [dispatch, id, post]);\r\n\r\n  function HandleShowComments() {\r\n    setIsCommentsShown(!isCommentsShown);\r\n  }\r\n\r\n  function handleDelete(postId: Tid) {\r\n    dispatch(fetchDeletePost(postId));\r\n  }\r\n\r\n  return post ? (\r\n    <div className={s.wrapper}>\r\n      <h2 className={s.title}>{post.title}</h2>\r\n      <p className={s.text}>{post.body}</p>\r\n      <div className={s.buttonGroup}>\r\n        <Button\r\n          onClick={() => {\r\n            setIsModalShown(!isModalShown);\r\n          }}\r\n        >\r\n          Update\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            handleDelete(post.id);\r\n            history.push('/');\r\n          }}\r\n        >\r\n          Delete\r\n        </Button>\r\n        <Button onClick={() => HandleShowComments()}>\r\n          {isCommentsShown ? 'Hide comments' : 'Show Comments'}\r\n        </Button>\r\n        <Button\r\n          onClick={() => setIsAddCommentFormShown(!isAddCommentFormShown)}\r\n        >\r\n          {isAddCommentFormShown ? 'Close form' : 'Add Comment'}\r\n        </Button>\r\n      </div>\r\n\r\n      {isAddCommentFormShown && (\r\n        <AddCommentsForm\r\n          postId={post.id}\r\n          onClose={() => setIsAddCommentFormShown(false)}\r\n        />\r\n      )}\r\n      {isCommentsShown && <Comments postId={post.id} />}\r\n\r\n      {isModalShown && (\r\n        <Modal onClose={() => setIsModalShown(!isModalShown)}>\r\n          <UpdatePostForm\r\n            postObj={post}\r\n            onClose={() => setIsModalShown(!isModalShown)}\r\n          />\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  ) : (\r\n    <div>Post not Found</div>\r\n  );\r\n}\r\n","import { useForm } from 'react-hook-form';\r\n// import { yupResolver } from '@hookform/resolvers/yup';\r\n// import * as yup from 'yup';\r\nimport { useState } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport s from './AddPostForm.module.css';\r\nimport { InewPost, Ipost } from '../../../helpers/interfaces';\r\nimport { fetchAddPost as addNewPost } from '../../../redux/posts/posts-operations';\r\nimport { useAppDispatch } from '../../../redux/hooks';\r\n\r\nexport default function AddPostForm(): JSX.Element {\r\n  const [isErrorShown, setIsErrorShown] = useState(false);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const titleId = 'title';\r\n  const bodiId = 'body';\r\n\r\n  // Validation\r\n  // ================================\r\n  //   const schema = yup.object({\r\n  //     title: yup.string().min(3, 'More then 3chars').max(20).required('Required'),\r\n  //     body: yup.string().min(3, 'min 3 symbols').required('Required'),\r\n  //   });\r\n\r\n  const { register, handleSubmit } = useForm<InewPost>({\r\n    // resolver: yupResolver(schema),\r\n    defaultValues: {\r\n      title: '',\r\n      body: '',\r\n    },\r\n  });\r\n\r\n  function onSubmit(data: InewPost) {\r\n    if (data.title.length < 3 || data.title.length < 3) {\r\n      setIsErrorShown(true);\r\n      setTimeout(() => {\r\n        setIsErrorShown(false);\r\n      }, 3000);\r\n      return;\r\n    }\r\n    const newPost: Ipost = {\r\n      id: nanoid(),\r\n      ...data,\r\n    };\r\n\r\n    dispatch(addNewPost(newPost));\r\n  }\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit(onSubmit)}>\r\n      <label htmlFor={titleId} className={s.label}>\r\n        <span className={s.text}>Title</span>\r\n        <input\r\n          autoComplete=\"off\"\r\n          className={s.input}\r\n          id={titleId}\r\n          {...register(titleId)}\r\n          type=\"text\"\r\n        />\r\n        {/* <p>{errors.title?.message}</p> */}\r\n      </label>\r\n      <label className={s.label} htmlFor={bodiId}>\r\n        <span className={s.text}>Body</span>\r\n        <textarea id={bodiId} {...register(bodiId)} className={s.textarea} />\r\n        {/* <p>{errors.body?.message}</p> */}\r\n      </label>\r\n      <button className={s.button} type=\"submit\">\r\n        Add post\r\n      </button>\r\n      {isErrorShown && (\r\n        <p className=\"error\">Input more than 3 symbols in each field</p>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/climbing.a7f4d5e8.jpg\";","import AddPostForm from '../Forms/AddPostForm/AddPostForm';\r\nimport Img from '../../images/climbing.jpg';\r\nimport s from './Hero.module.css';\r\n\r\nexport default function Hero(): JSX.Element {\r\n  return (\r\n    <div className={s.hero}>\r\n      <AddPostForm />\r\n      <img className={s.img} src={Img} alt=\"climbing guy\" />\r\n    </div>\r\n  );\r\n}\r\n","import { NavLink, useLocation } from 'react-router-dom';\r\nimport s from './NavBar.module.css';\r\n\r\nexport default function NavBar(): JSX.Element {\r\n  const location = useLocation();\r\n  const isMainPage = location.pathname === '/';\r\n  return (\r\n    <>\r\n      <header className={s.header}>\r\n        <nav className={s.nav}>\r\n          <NavLink to=\"/\" className={s.link} activeClassName={s.active} exact>\r\n            Main\r\n          </NavLink>\r\n          {!isMainPage && (\r\n            <NavLink to=\"/posts/\" className={s.link} activeClassName={s.active}>\r\n              Post\r\n            </NavLink>\r\n          )}\r\n        </nav>\r\n      </header>\r\n    </>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport { Ipost, Tid } from 'helpers/interfaces';\r\nimport AddCommentsForm from 'components/Forms/AddCommentsForm/AddCommentsForm';\r\nimport Button from 'components/Button/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport Modal from '../Modal/Modal';\r\nimport UpdatePostForm from '../Forms/UpdatePostForm/UpdatePostForm';\r\nimport Comments from '../Comments/Comments';\r\nimport s from './SinglePost.module.css';\r\n\r\ninterface Iprops {\r\n  post: Ipost;\r\n  handleDelete: (id: Tid) => void;\r\n}\r\n\r\nexport default function SinglePost(props: Iprops): JSX.Element {\r\n  const { post, handleDelete } = props;\r\n  // const { pathname } = useLocation();\r\n  const [isAddCommentFormShown, setIsAddCommentFormShown] = useState(false);\r\n  const [isCommentsShown, setIsCommentsShown] = useState(false);\r\n  const [isModalShown, setIsModalShown] = useState(false);\r\n\r\n  function HandleShowComments() {\r\n    setIsCommentsShown(!isCommentsShown);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={s.wrapper}>\r\n        <h2 className={s.title}>{post.title}</h2>\r\n        <p className={s.text}>{post.body}</p>\r\n        <Link to={`posts/${post.id}`} className={s.link}>\r\n          Open in another page\r\n        </Link>\r\n        <div className={s.buttonGroup}>\r\n          <Button\r\n            onClick={() => {\r\n              setIsModalShown(!isModalShown);\r\n            }}\r\n          >\r\n            Update\r\n          </Button>\r\n          <Button onClick={() => handleDelete(post.id)}>Delete</Button>\r\n          <Button onClick={() => HandleShowComments()}>\r\n            {isCommentsShown ? 'Hide comments' : 'Show Comments'}\r\n          </Button>\r\n          <Button\r\n            onClick={() => setIsAddCommentFormShown(!isAddCommentFormShown)}\r\n          >\r\n            {isAddCommentFormShown ? 'Close form' : 'Add Comment'}\r\n          </Button>\r\n        </div>\r\n\r\n        {isAddCommentFormShown && (\r\n          <AddCommentsForm\r\n            postId={post.id}\r\n            onClose={() => setIsAddCommentFormShown(false)}\r\n          />\r\n        )}\r\n        {isCommentsShown && <Comments postId={post.id} />}\r\n\r\n        {isModalShown && (\r\n          <Modal onClose={() => setIsModalShown(!isModalShown)}>\r\n            <UpdatePostForm\r\n              postObj={post}\r\n              onClose={() => setIsModalShown(!isModalShown)}\r\n            />\r\n          </Modal>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { useEffect } from 'react';\r\nimport { Tid } from 'helpers/interfaces';\r\nimport { getPosts } from '../../redux/posts/posts-selectors';\r\nimport {\r\n  fetchDeletePost,\r\n  fetchPosts,\r\n} from '../../redux/posts/posts-operations';\r\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\r\nimport OnePost from '../SinglePost/SinglePost';\r\nimport s from './Posts.module.css';\r\n\r\nexport default function Posts(): JSX.Element {\r\n  const dispatch = useAppDispatch();\r\n  const posts = useAppSelector(getPosts);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchPosts());\r\n  }, [dispatch]);\r\n\r\n  function handleDelete(id: Tid) {\r\n    console.log(id);\r\n    dispatch(fetchDeletePost(id.toString()));\r\n  }\r\n  return (\r\n    <>\r\n      <ul className={s.list}>\r\n        {posts.map(e => (\r\n          <li className={s.item} key={e.id}>\r\n            <OnePost post={e} handleDelete={handleDelete} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n","import Container from 'components/Container/Container';\nimport SinglePagePost from 'components/SinglePagePost/SinglePagePost';\nimport { Switch, Route, useLocation } from 'react-router-dom';\nimport Hero from '../Hero/Hero';\nimport NavBar from '../NavBar/NavBar';\nimport Posts from '../Posts/Posts';\n\n// import s from './App.module.css';\n\n// React.FunctionComponent<Props> = (props: Props) => (\n// const Component: React.SFC<Props> = (props: Props) => (\n// =====================================\nfunction App(): JSX.Element {\n  const location = useLocation();\n  console.log(location);\n\n  return (\n    <Container>\n      <NavBar />\n      <Switch>\n        <Route path=\"/\" exact>\n          <Hero />\n          <Posts />\n        </Route>\n        <Route path=\"/posts/:postId\" exact>\n          <SinglePagePost />\n        </Route>\n      </Switch>\n    </Container>\n  );\n}\n\nexport default App;\n","import styled from 'styled-components/';\r\n\r\nexport default styled.body`\r\n  font-family: monospace;\r\n  background-color: red;\r\n`;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport PostStore from './redux/store';\nimport './index.css';\n\nimport App from './components/app/App';\nimport mainTheme from './styles/theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={PostStore}>\n        <ThemeProvider theme={mainTheme}>\n          <App />\n        </ThemeProvider>\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}